openapi: 3.0.3
info:
  title: Flowplane CORS Filter API
  description: API for configuring CORS (Cross-Origin Resource Sharing) HTTP filters
  version: 1.0.0

paths:
  /listeners/{listener_name}/filters/cors:
    put:
      summary: Configure CORS filter for listener
      description: Set or update CORS policy at listener level
      parameters:
        - name: listener_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the listener to configure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorsConfig'
            examples:
              basic_cors:
                summary: Basic CORS configuration
                value:
                  allow_origins:
                    - match_type: "exact"
                      pattern: "https://app.example.com"
                      case_sensitive: true
                  allow_methods: ["GET", "POST", "PUT", "DELETE"]
                  allow_headers: ["content-type", "authorization"]
                  expose_headers: ["x-custom-header"]
                  allow_credentials: false
                  max_age: 86400
              wildcard_subdomain:
                summary: Subdomain wildcard pattern
                value:
                  allow_origins:
                    - match_type: "safe_regex"
                      pattern: "https://[a-z0-9-]+\\.example\\.com"
                      case_sensitive: true
                  allow_methods: ["GET", "POST"]
                  allow_headers: ["content-type"]
                  allow_credentials: false
                  max_age: 3600
      responses:
        '200':
          description: CORS filter configured successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterConfigResponse'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Listener not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get CORS filter configuration
      description: Retrieve current CORS policy for listener
      parameters:
        - name: listener_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the listener
      responses:
        '200':
          description: Current CORS configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsConfig'
        '404':
          description: Listener or CORS filter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove CORS filter
      description: Remove CORS filter from listener
      parameters:
        - name: listener_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the listener
      responses:
        '204':
          description: CORS filter removed successfully
        '404':
          description: Listener or CORS filter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /routes/{route_name}/filters/cors:
    put:
      summary: Configure per-route CORS override
      description: Set route-specific CORS policy that overrides listener configuration
      parameters:
        - name: route_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the route to configure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CorsPerRouteConfig'
            examples:
              route_override:
                summary: Route-specific CORS policy
                value:
                  enabled: true
                  inherit_from_listener: false
                  cors_policy:
                    allow_origins:
                      - match_type: "exact"
                        pattern: "https://admin.example.com"
                        case_sensitive: true
                    allow_methods: ["GET", "POST", "DELETE"]
                    allow_headers: ["content-type", "authorization", "x-admin-token"]
                    allow_credentials: true
                    max_age: 600
              route_disabled:
                summary: Disable CORS for specific route
                value:
                  enabled: false
                  inherit_from_listener: false
      responses:
        '200':
          description: Route CORS configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterConfigResponse'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get route CORS configuration
      description: Retrieve current per-route CORS policy
      parameters:
        - name: route_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the route
      responses:
        '200':
          description: Current route CORS configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsPerRouteConfig'
        '404':
          description: Route or CORS configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove route CORS override
      description: Remove route-specific CORS configuration, falling back to listener policy
      parameters:
        - name: route_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the route
      responses:
        '204':
          description: Route CORS override removed
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CorsConfig:
      type: object
      required:
        - allow_origins
      properties:
        allow_origins:
          type: array
          items:
            $ref: '#/components/schemas/OriginPattern'
          minItems: 1
          description: List of allowed origin patterns
        allow_methods:
          type: array
          items:
            $ref: '#/components/schemas/HttpMethod'
          default: ["GET", "POST"]
          description: Permitted HTTP methods
        allow_headers:
          type: array
          items:
            type: string
          default: ["content-type", "authorization"]
          description: Allowed request headers
        expose_headers:
          type: array
          items:
            type: string
          default: []
          description: Headers exposed to client
        allow_credentials:
          type: boolean
          default: false
          description: Whether credentials are supported
        max_age:
          type: integer
          minimum: 0
          maximum: 315576000000
          default: 86400
          description: Preflight cache duration in seconds
      example:
        allow_origins:
          - match_type: "exact"
            pattern: "https://app.example.com"
            case_sensitive: true
        allow_methods: ["GET", "POST", "PUT"]
        allow_headers: ["content-type", "authorization"]
        expose_headers: ["x-request-id"]
        allow_credentials: false
        max_age: 86400

    CorsPerRouteConfig:
      type: object
      properties:
        enabled:
          type: boolean
          default: true
          description: Whether CORS is enabled for this route
        inherit_from_listener:
          type: boolean
          default: true
          description: Use listener policy with route modifications
        cors_policy:
          $ref: '#/components/schemas/CorsConfig'
          description: Route-specific policy override
      example:
        enabled: true
        inherit_from_listener: false
        cors_policy:
          allow_origins:
            - match_type: "exact"
              pattern: "https://admin.example.com"
              case_sensitive: true
          allow_methods: ["GET", "POST"]
          allow_credentials: true

    OriginPattern:
      type: object
      required:
        - match_type
        - pattern
      properties:
        match_type:
          $ref: '#/components/schemas/OriginMatchType'
        pattern:
          type: string
          minLength: 1
          description: The pattern string
        case_sensitive:
          type: boolean
          default: true
          description: Whether matching is case sensitive
      example:
        match_type: "exact"
        pattern: "https://app.example.com"
        case_sensitive: true

    OriginMatchType:
      type: string
      enum:
        - exact
        - prefix
        - suffix
        - safe_regex
      description: Type of origin pattern matching

    HttpMethod:
      type: string
      enum:
        - GET
        - POST
        - PUT
        - DELETE
        - HEAD
        - OPTIONS
        - PATCH
        - TRACE
      description: HTTP method for CORS

    FilterConfigResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
        filter_name:
          type: string
          description: Name of the configured filter
        config_checksum:
          type: string
          description: Checksum of the applied configuration
      example:
        message: "CORS filter configured successfully"
        filter_name: "envoy.filters.http.cors"
        config_checksum: "sha256:abc123..."

    ValidationError:
      type: object
      properties:
        error:
          type: string
          description: Error message
        validation_errors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
          description: Field-specific validation errors
      example:
        error: "Configuration validation failed"
        validation_errors:
          - field: "allow_origins"
            message: "Cannot be empty"
          - field: "max_age"
            message: "Exceeds maximum allowed value"

    FieldError:
      type: object
      properties:
        field:
          type: string
          description: Name of the invalid field
        message:
          type: string
          description: Validation error message
        code:
          type: string
          description: Error code for programmatic handling
      example:
        field: "allow_origins"
        message: "Cannot be empty"
        code: "REQUIRED_FIELD_EMPTY"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
      example:
        error: "Listener not found"
        code: "LISTENER_NOT_FOUND"