openapi: 3.0.3
info:
  title: Flowplane HTTPS Server Contract
  description: Contract for TLS-enabled admin API server behavior
  version: 1.0.0

paths:
  /health:
    get:
      summary: Health check endpoint (works over HTTP and HTTPS)
      description: Verify server is responding, works identically over HTTP and HTTPS
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                  timestamp:
                    type: string
                    format: date-time
                  tls_enabled:
                    type: boolean
                    description: Whether this response was served over HTTPS
                  server_version:
                    type: string
              examples:
                https_response:
                  summary: Response over HTTPS
                  value:
                    status: "healthy"
                    timestamp: "2025-09-27T10:00:00Z"
                    tls_enabled: true
                    server_version: "0.1.0"
                http_response:
                  summary: Response over HTTP (TLS disabled)
                  value:
                    status: "healthy"
                    timestamp: "2025-09-27T10:00:00Z"
                    tls_enabled: false
                    server_version: "0.1.0"

  /api/v1/clusters:
    get:
      summary: List clusters (authentication required)
      description: Verify existing API endpoints work identically over HTTPS
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Cluster list (behavior identical to HTTP)
          content:
            application/json:
              schema:
                type: object
                properties:
                  clusters:
                    type: array
                    items:
                      type: object
        '401':
          description: Authentication required (behavior identical to HTTP)
        '403':
          description: Insufficient permissions (behavior identical to HTTP)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Personal Access Token
      description: Personal access token authentication (works over HTTP and HTTPS)

  schemas:
    TlsHandshakeInfo:
      type: object
      description: Information about TLS handshake for audit logging
      properties:
        protocol_version:
          type: string
          description: TLS protocol version negotiated
          example: "TLSv1.3"
        cipher_suite:
          type: string
          description: Cipher suite negotiated
          example: "TLS_AES_256_GCM_SHA384"
        client_certificate_provided:
          type: boolean
          description: Whether client provided certificate
        session_id:
          type: string
          description: TLS session identifier
        handshake_time_ms:
          type: number
          description: Handshake duration in milliseconds

    ServerStartupLog:
      type: object
      description: Server startup log entry format
      properties:
        event:
          type: string
          enum: [server_started]
        timestamp:
          type: string
          format: date-time
        tls_enabled:
          type: boolean
        bind_address:
          type: string
        port:
          type: integer
        certificate_info:
          $ref: '../tls-config.yaml#/components/schemas/CertificateInfo'
          nullable: true

  examples:
    TlsServerStartup:
      summary: TLS server startup log
      value:
        event: "server_started"
        timestamp: "2025-09-27T10:00:00Z"
        tls_enabled: true
        bind_address: "0.0.0.0"
        port: 8443
        certificate_info:
          subject: "CN=api.example.com,O=Example Corp"
          issuer: "CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US"
          not_before: "2025-09-01T00:00:00Z"
          not_after: "2025-12-01T00:00:00Z"
          serial_number: "1234567890ABCDEF"
          fingerprint: "sha256:ABC123...DEF789"

    HttpServerStartup:
      summary: HTTP server startup log
      value:
        event: "server_started"
        timestamp: "2025-09-27T10:00:00Z"
        tls_enabled: false
        bind_address: "0.0.0.0"
        port: 8080
        certificate_info: null

    TlsConnectionAudit:
      summary: TLS connection audit log entry
      value:
        event_type: "tls.connection.established"
        timestamp: "2025-09-27T10:01:00Z"
        client_ip: "192.168.1.100"
        handshake_info:
          protocol_version: "TLSv1.3"
          cipher_suite: "TLS_AES_256_GCM_SHA384"
          client_certificate_provided: false
          session_id: "abc123def456"
          handshake_time_ms: 12.5
        correlation_id: "conn_001"

# Contract Test Scenarios
test_scenarios:
  tls_enabled_scenarios:
    - name: "HTTPS health check"
      description: "Health endpoint responds correctly over HTTPS"
      request:
        method: GET
        url: "https://localhost:8443/health"
        headers: {}
      expected_response:
        status: 200
        headers:
          content-type: "application/json"
        body_contains:
          - "tls_enabled": true
          - "status": "healthy"

    - name: "HTTPS API with authentication"
      description: "Authenticated API requests work over HTTPS"
      request:
        method: GET
        url: "https://localhost:8443/api/v1/clusters"
        headers:
          Authorization: "Bearer fp_test_token"
      expected_response:
        status: 200
        headers:
          content-type: "application/json"

    - name: "HTTPS without authentication"
      description: "Unauthenticated requests return 401 over HTTPS"
      request:
        method: GET
        url: "https://localhost:8443/api/v1/clusters"
        headers: {}
      expected_response:
        status: 401

  tls_disabled_scenarios:
    - name: "HTTP health check"
      description: "Health endpoint responds correctly over HTTP"
      request:
        method: GET
        url: "http://localhost:8080/health"
        headers: {}
      expected_response:
        status: 200
        headers:
          content-type: "application/json"
        body_contains:
          - "tls_enabled": false
          - "status": "healthy"

    - name: "HTTP API with authentication"
      description: "Authenticated API requests work over HTTP"
      request:
        method: GET
        url: "http://localhost:8080/api/v1/clusters"
        headers:
          Authorization: "Bearer fp_test_token"
      expected_response:
        status: 200
        headers:
          content-type: "application/json"

  startup_failure_scenarios:
    - name: "Missing certificate file"
      description: "Server fails to start with missing certificate"
      config:
        FLOWPLANE_TLS_ENABLED: "true"
        FLOWPLANE_TLS_CERT_PATH: "/nonexistent/cert.pem"
        FLOWPLANE_TLS_KEY_PATH: "/etc/flowplane/key.pem"
      expected_behavior:
        startup_fails: true
        error_type: "configuration_error"
        error_message_contains: "Certificate file not found"

    - name: "Certificate/key mismatch"
      description: "Server fails to start with mismatched cert/key"
      config:
        FLOWPLANE_TLS_ENABLED: "true"
        FLOWPLANE_TLS_CERT_PATH: "/etc/flowplane/cert.pem"
        FLOWPLANE_TLS_KEY_PATH: "/etc/flowplane/wrong-key.pem"
      expected_behavior:
        startup_fails: true
        error_type: "mismatch_error"
        error_message_contains: "Certificate and private key do not match"