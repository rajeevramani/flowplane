### Variables
@base_url = http://localhost:8080
@token = {{$dotenv API_TOKEN}}

# Port Allocations
@envoy_port_listener_test_1 = 10011
@envoy_port_listener_test_2 = 10012
@envoy_port_listener_test_3 = 10013

# Resource Names
@listener_name_1 = httpbin-listener-11
@listener_name_2 = httpbin-listener-12
@listener_name_3 = httpbin-listener-13

# HTTPBin upstream
@httpbin_host = httpbin.org
@httpbin_port = 443

# =============================================================================
# Test 1: Create Complete Listener Flow with Binary Endpoints
# =============================================================================

### Step 1.1: Create Cluster for Listener Test 1
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-cluster-listener-1",
  "connectTimeoutSeconds": 5,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 1.2: Create Routes for Listener 1 (/bytes and /base64)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-routes-listener-1",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-bytes",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/bytes"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-1",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-base64",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/base64"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-1",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 1.3: Create Listener 1 on Port {{envoy_port_listener_test_1}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_1}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_listener_test_1}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "httpbin-routes-listener-1",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 1.4: Test through Envoy - /bytes/100 endpoint
GET http://localhost:{{envoy_port_listener_test_1}}/bytes/100
Host: {{httpbin_host}}

### Step 1.5: Test through Envoy - /base64 endpoint
GET http://localhost:{{envoy_port_listener_test_1}}/base64/aGVsbG8gd29ybGQ=
Host: {{httpbin_host}}

# =============================================================================
# Test 2: Create Second Listener Flow with Image and Form Endpoints
# =============================================================================

### Step 2.1: Create Cluster for Listener Test 2
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-cluster-listener-2",
  "connectTimeoutSeconds": 10,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 2.2: Create Routes for Listener 2 (/image and /forms)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-routes-listener-2",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-image",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/image"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-2",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-forms",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/forms"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-2",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 2.3: Create Listener 2 on Port {{envoy_port_listener_test_2}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_2}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_listener_test_2}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "httpbin-routes-listener-2",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 2.4: Test through Envoy - /image/png endpoint
GET http://localhost:{{envoy_port_listener_test_2}}/image/png
Host: {{httpbin_host}}

### Step 2.5: Test through Envoy - /forms/post endpoint
GET http://localhost:{{envoy_port_listener_test_2}}/forms/post
Host: {{httpbin_host}}

# =============================================================================
# Test 3: Create Third Listener Flow with XML and Robots Endpoints
# =============================================================================

### Step 3.1: Create Cluster for Listener Test 3
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-cluster-listener-3",
  "connectTimeoutSeconds": 5,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 3.2: Create Routes for Listener 3 (/xml and /robots.txt)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-routes-listener-3",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-xml",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/xml"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-3",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-robots",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/robots.txt"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-listener-3",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 3.3: Create Listener 3 on Port {{envoy_port_listener_test_3}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_3}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_listener_test_3}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "httpbin-routes-listener-3",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 3.4: Test through Envoy - /xml endpoint
GET http://localhost:{{envoy_port_listener_test_3}}/xml
Host: {{httpbin_host}}

### Step 3.5: Test through Envoy - /robots.txt endpoint
GET http://localhost:{{envoy_port_listener_test_3}}/robots.txt
Host: {{httpbin_host}}

# =============================================================================
# READ Operations
# =============================================================================

### List All Listeners
GET {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}

### Get Specific Listener 1
GET {{base_url}}/api/v1/listeners/{{listener_name_1}}
Authorization: Bearer {{token}}

### Get Specific Listener 2
GET {{base_url}}/api/v1/listeners/{{listener_name_2}}
Authorization: Bearer {{token}}

### Get Specific Listener 3
GET {{base_url}}/api/v1/listeners/{{listener_name_3}}
Authorization: Bearer {{token}}

# =============================================================================
# UPDATE Operations
# =============================================================================

### Update Listener 1 (change port - NOTE: requires Envoy restart)
PUT {{base_url}}/api/v1/listeners/{{listener_name_1}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_1}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_listener_test_1}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "httpbin-routes-listener-1",
          "statPrefix": "updated-listener",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Verify Update - Test still works through Envoy
GET http://localhost:{{envoy_port_listener_test_1}}/bytes/50
Host: {{httpbin_host}}

# =============================================================================
# NOTES
# =============================================================================

# This file creates three complete test flows:
#
# Flow 1 (Port {{envoy_port_listener_test_1}}):
#   - Cluster: httpbin-cluster-listener-1
#   - Route: httpbin-routes-listener-1 (/bytes, /base64)
#   - Listener: {{listener_name_1}}
#   - Tests: GET /bytes/100, GET /base64/...
#
# Flow 2 (Port {{envoy_port_listener_test_2}}):
#   - Cluster: httpbin-cluster-listener-2
#   - Route: httpbin-routes-listener-2 (/image, /forms)
#   - Listener: {{listener_name_2}}
#   - Tests: GET /image/png, GET /forms/post
#
# Flow 3 (Port {{envoy_port_listener_test_3}}):
#   - Cluster: httpbin-cluster-listener-3
#   - Route: httpbin-routes-listener-3 (/xml, /robots.txt)
#   - Listener: {{listener_name_3}}
#   - Tests: GET /xml, GET /robots.txt
#
# All three flows demonstrate:
#   - Complete resource chain: cluster → routes → listener
#   - Different content types (binary, images, XML, text)
#   - Concurrent listeners on different ports
#   - Listener updates with Envoy verification
#
# Use cleanup.http to delete all resources when done.
