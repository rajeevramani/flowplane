### Variables
@base_url = http://localhost:8080
@token = {{$dotenv API_TOKEN}}

# Port Allocations
@envoy_port_route_test_1 = 10006
@envoy_port_route_test_2 = 10007

# Resource Names
@route_name_1 = httpbin-routes-11
@route_name_2 = httpbin-routes-12

# HTTPBin upstream
@httpbin_host = httpbin.org
@httpbin_port = 443

# =============================================================================
# Test 1: Create Complete Route Flow with JSON and UUID Endpoints
# =============================================================================

### Step 1.1: Create Cluster for Route Test 1
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-cluster-route-1",
  "connectTimeoutSeconds": 5,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 1.2: Create Routes with Multiple Path Patterns (/json and /uuid)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{route_name_1}}",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-json",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/json"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-1",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-uuid",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/uuid"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-1",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 1.3: Create Listener on Port {{envoy_port_route_test_1}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-listener-route-1",
  "address": "0.0.0.0",
  "port": {{envoy_port_route_test_1}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "{{route_name_1}}",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 1.4: Test through Envoy - /json endpoint
GET http://localhost:{{envoy_port_route_test_1}}/json
Host: {{httpbin_host}}

### Step 1.5: Test through Envoy - /uuid endpoint
GET http://localhost:{{envoy_port_route_test_1}}/uuid
Host: {{httpbin_host}}

# =============================================================================
# Test 2: Create Second Route Flow with Status and Delay Endpoints
# =============================================================================

### Step 2.1: Create Cluster for Route Test 2
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-cluster-route-2",
  "connectTimeoutSeconds": 10,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 2.2: Create Routes with Status and Delay Paths
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{route_name_2}}",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-status-200",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/status/200"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-2",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-delay",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/delay"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-2",
            "timeoutSeconds": 30
          }
        },
        {
          "name": "httpbin-response-headers",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/response-headers"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-2",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 2.3: Create Listener 2 on Port {{envoy_port_route_test_2}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "httpbin-listener-route-2",
  "address": "0.0.0.0",
  "port": {{envoy_port_route_test_2}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "{{route_name_2}}",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 2.4: Test through Envoy - /status/200 endpoint
GET http://localhost:{{envoy_port_route_test_2}}/status/200
Host: {{httpbin_host}}

### Step 2.5: Test through Envoy - /delay/1 endpoint (1 second delay)
GET http://localhost:{{envoy_port_route_test_2}}/delay/1
Host: {{httpbin_host}}

### Step 2.6: Test through Envoy - /response-headers with query params
GET http://localhost:{{envoy_port_route_test_2}}/response-headers?X-Custom-Header=test&X-Another=value
Host: {{httpbin_host}}

# =============================================================================
# READ Operations
# =============================================================================

### List All Routes
GET {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}

### Get Specific Route 1
GET {{base_url}}/api/v1/routes/{{route_name_1}}
Authorization: Bearer {{token}}

### Get Specific Route 2
GET {{base_url}}/api/v1/routes/{{route_name_2}}
Authorization: Bearer {{token}}

# =============================================================================
# UPDATE Operations
# =============================================================================

### Update Route 1 (add /html endpoint)
PUT {{base_url}}/api/v1/routes/{{route_name_1}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{route_name_1}}",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-json",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/json"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-1",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-uuid",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/uuid"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-1",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-html",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/html"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "httpbin-cluster-route-1",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Verify Update - Test new /html endpoint works through Envoy
GET http://localhost:{{envoy_port_route_test_1}}/html
Host: {{httpbin_host}}

### Verify Update - Original endpoints still work
GET http://localhost:{{envoy_port_route_test_1}}/json
Host: {{httpbin_host}}

# =============================================================================
# NOTES
# =============================================================================

# This file creates two complete test flows:
#
# Flow 1 (Port {{envoy_port_route_test_1}}):
#   - Cluster: httpbin-cluster-route-1
#   - Route: {{route_name_1}} (/json, /uuid)
#   - Listener: httpbin-listener-route-1
#   - Tests: GET /json, GET /uuid
#
# Flow 2 (Port {{envoy_port_route_test_2}}):
#   - Cluster: httpbin-cluster-route-2
#   - Route: {{route_name_2}} (/status/200, /delay/*, /response-headers)
#   - Listener: httpbin-listener-route-2
#   - Tests: GET /status/200, GET /delay/1, GET /response-headers
#
# Both flows demonstrate:
#   - Multiple route matches in a single route configuration
#   - Different httpbin endpoints and response types
#   - Route updates with Envoy verification
#
# Use cleanup.http to delete all resources when done.
