### Variables
@base_url = http://localhost:8080
@token = {{$dotenv API_TOKEN}}

# Port Allocations
@envoy_port_cluster_test_1 = 10001
@envoy_port_cluster_test_2 = 10002

# Resource Names
@cluster_name_1 = httpbin-cluster-1
@cluster_name_2 = httpbin-cluster-2
@route_name_1 = httpbin-routes-1
@route_name_2 = httpbin-routes-2
@listener_name_1 = httpbin-listener-1
@listener_name_2 = httpbin-listener-2

# HTTPBin upstream
@httpbin_host = httpbin.org
@httpbin_port = 443

# =============================================================================
# Test 1: Create Complete Flow and Test through Envoy
# =============================================================================

### Step 1.1: Create Cluster (httpbin-cluster-1)
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{cluster_name_1}}",
  "connectTimeoutSeconds": 5,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 1.2: Create Routes for Cluster 1 (/get endpoint)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{route_name_1}}",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-get",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/get"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "{{cluster_name_1}}",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 1.3: Create Listener on Port {{envoy_port_cluster_test_1}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_1}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_cluster_test_1}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "{{route_name_1}}",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 1.4: Test through Envoy - /get endpoint
GET http://localhost:{{envoy_port_cluster_test_1}}/get
Host: {{httpbin_host}}

# =============================================================================
# Test 2: Create Second Cluster with Different Paths
# =============================================================================

### Step 2.1: Create Second Cluster (httpbin-cluster-2)
POST {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{cluster_name_2}}",
  "connectTimeoutSeconds": 10,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Step 2.2: Create Routes for Cluster 2 (/post and /headers endpoints)
POST {{base_url}}/api/v1/routes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{route_name_2}}",
  "virtualHosts": [
    {
      "name": "default",
      "domains": ["*"],
      "routes": [
        {
          "name": "httpbin-post",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/post"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "{{cluster_name_2}}",
            "timeoutSeconds": 15
          }
        },
        {
          "name": "httpbin-headers",
          "match": {
            "path": {
              "type": "prefix",
              "value": "/headers"
            }
          },
          "action": {
            "type": "forward",
            "cluster": "{{cluster_name_2}}",
            "timeoutSeconds": 15
          }
        }
      ]
    }
  ]
}

### Step 2.3: Create Listener 2 on Port {{envoy_port_cluster_test_2}}
POST {{base_url}}/api/v1/listeners
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{listener_name_2}}",
  "address": "0.0.0.0",
  "port": {{envoy_port_cluster_test_2}},
  "protocol": "HTTP",
  "filterChains": [
    {
      "name": "default",
      "filters": [
        {
          "name": "envoy.filters.network.http_connection_manager",
          "type": "httpConnectionManager",
          "routeConfigName": "{{route_name_2}}",
          "httpFilters": [
            {
              "filter": {
                "type": "router"
              }
            }
          ]
        }
      ]
    }
  ]
}

### Step 2.4: Test through Envoy - /post endpoint
POST http://localhost:{{envoy_port_cluster_test_2}}/post
Host: {{httpbin_host}}
Content-Type: application/json

{
  "test": "data",
  "message": "Testing cluster 2"
}

### Step 2.5: Test through Envoy - /headers endpoint
GET http://localhost:{{envoy_port_cluster_test_2}}/headers
Host: {{httpbin_host}}

# =============================================================================
# READ Operations
# =============================================================================

### List All Clusters
GET {{base_url}}/api/v1/clusters
Authorization: Bearer {{token}}

### Get Specific Cluster 1
GET {{base_url}}/api/v1/clusters/{{cluster_name_1}}
Authorization: Bearer {{token}}

### Get Specific Cluster 2
GET {{base_url}}/api/v1/clusters/{{cluster_name_2}}
Authorization: Bearer {{token}}

# =============================================================================
# UPDATE Operations
# =============================================================================

### Update Cluster 1 (increase timeout)
PUT {{base_url}}/api/v1/clusters/{{cluster_name_1}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "{{cluster_name_1}}",
  "connectTimeoutSeconds": 20,
  "endpoints": [
    {
      "host": "{{httpbin_host}}",
      "port": {{httpbin_port}}
    }
  ]
}

### Verify Update - Test still works through Envoy
GET http://localhost:{{envoy_port_cluster_test_1}}/get
Host: {{httpbin_host}}

# =============================================================================
# NOTES
# =============================================================================

# This file creates two complete test flows:
#
# Flow 1 (Port {{envoy_port_cluster_test_1}}):
#   - Cluster: {{cluster_name_1}}
#   - Route: {{route_name_1}} (/get)
#   - Listener: {{listener_name_1}}
#   - Test: GET /get
#
# Flow 2 (Port {{envoy_port_cluster_test_2}}):
#   - Cluster: {{cluster_name_2}}
#   - Route: {{route_name_2}} (/post, /headers)
#   - Listener: {{listener_name_2}}
#   - Tests: POST /post, GET /headers
#
# Both flows run concurrently to verify multiple listeners work together.
# Use cleanup.http to delete all resources when done.
